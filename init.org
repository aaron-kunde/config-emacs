:PROPERTIES:
:header-args:emacs-lisp: :tangle yes :padline no
:END:

* Custom set configurations
Variables or faces can be set by [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Customization.html][Emacs Customize interface]]. Customisation shall be set explicitly in this file. Therefore, the following code blocks should always be empty:
#+begin_example emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+end_example

* Startup behaviour
Disable splash screen at startup:
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

* General functionalities
Disable annoying sounds, like when hitting TAB and no completion can be found:
#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

Disable tool bar:
#+begin_src emacs-lisp
  (tool-bar-mode -1)
#+end_src

Enable to show the current column number in the mode line:
#+begin_src emacs-lisp
  (setq column-number-mode t)
#+end_src

Based on the [[https://www.emacswiki.org/emacs/LineNumbers][Emacs Wiki]], enable display of line numbers in the buffer for programming modes:
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

Enable displaying of file sizes in the mode line:
#+begin_src emacs-lisp
  (setq size-indication-mode t)
#+end_src

Set language environment to German:
#+begin_src emacs-lisp
  (set-locale-environment "de_DE.utf-8")
#+end_src

* General appearance
Themes are not used. Only adjustments to the standard faces are made.

** Customise default face
Just revert foreground and background colour:
#+begin_src emacs-lisp
  (set-face-background 'default "black")
  (set-face-foreground 'default "white")
#+end_src

** Customise cursor face
Make the cursor green:
#+begin_src emacs-lisp
  (set-face-background 'cursor "green")
#+end_src

* Package management
** General package management
Define the package archives to use:
#+begin_src emacs-lisp
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("melpa" . "https://melpa.org/packages/")))
#+end_src

Ensure newly installed packages are downloaded and installed properly before running:
#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

Initialise package variables
#+begin_src emacs-lisp
  (package-initialize)
#+end_src

Refresh package cache if not done yet:
#+begin_src emacs-lisp
  (unless package-archive-contents (package-refresh-contents))
#+end_src

** Use /use-package/
Install [[https://github.com/jwiegley/use-package][use-package]], if not done yet:
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package) (package-install 'use-package))
#+end_src

Initialise use-package:
#+begin_src emacs-lisp
  (eval-when-compile (require 'use-package))
#+end_src

** Add Signature management
Install [[https://elpa.gnu.org/packages/gnu-elpa-keyring-update.html][gnu-elpa-keyring-update]] to keep GPG keyring  or GNU ELPA up to date and keep the default behaviour:
#+begin_src emacs-lisp
  (use-package gnu-elpa-keyring-update
    :config  (setq package-check-signature 'allow-unsigned))
#+end_src

If gnu-elpa-keyring-update cannot be installed, because of expired signatures, the signature check can be temporary disabled, like described in the [[https://www.mail-archive.com/debian-bugs-dist@lists.debian.org/msg1970090.html][Debian mailing list]]:
#+begin_src emacs-lisp :tangle no
  (setq package-check-signature nil)
#+end_src

* Customize /EasyPG/
Configuring EasyPG, like it is described in the [[https://www.gnu.org/software/emacs/manual/html_node/epa/GnuPG-Pinentry.html][Emacs manual]]. This way, the passphase is asced in the minibuffer:
#+begin_src emacs-lisp
  (use-package epg
    :custom
    (epg-pinentry-mode 'loopback))
#+end_src

* Use /which-key/
Install and counfigure [[https://github.com/justbur/emacs-which-key][which-key]] to display current awailable key bindings while typing:
#+begin_src emacs-lisp
  (use-package which-key
    :config  (which-key-mode))
#+end_src

* Use /counsel/, /ivy/ and /swiper/
Install and configure [[https://github.com/abo-abo/swiper][counsel]] along with ivy and swiper:
#+begin_src emacs-lisp
  (use-package counsel
    :bind
    ("C-s" . swiper-isearch)
    ("C-x b" . counsel-switch-buffer)
    :config (counsel-mode))
#+end_src

Install [[https://github.com/Yevgnen/ivy-rich][ivy-rich]], to have more [[https://oremacs.com/swiper/][actions]] with ~M-o~ and better UI in the minibuffer for ivy completions:
#+begin_src emacs-lisp
  (use-package ivy-rich
    :config (ivy-rich-mode))
#+end_src

* Use /helpful/
Install [[https://github.com/Wilfred/helpful][helpful]] to enhance Emacs help with more contextual information:
#+begin_src emacs-lisp
  (use-package helpful
    :commands
    (helpful-callable
     helpful-variable
     helpful-command
     helpful-key
     helpful-at-point)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key)
    ("C-h C-x d" . helpful-at-point))
#+end_src

* Use /projectile/
Install [[https://github.com/bbatsov/projectile][projectile]]:
#+begin_src emacs-lisp
  (use-package projectile
    :config (projectile-mode)
    :bind-keymap ("C-c p" . projectile-command-map))
#+end_src

Use [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]] to have integration with counsel:
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* Use /Magit/
Install [[https://magit.vc/][Magit]] to have a nice Git integration:
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Customize /Ediff/
Make some adjustment to the forground colors to increase readability on dark themes:

| Original color         | Saturation | Lightness | New colour | Saturation | Lightness |
|------------------------+------------+-----------+------------+------------+-----------|
| ~#a9a9a9~ (/DarkGrey/) | 66 %       | 0 %       | ~#555555~  | 33 %       | 0 %       |
| ~#335533~              | 25 %       | 27 %      | ~#334d33~  | 20 %       | 25 %      |
| ~#553333~              | 25 %       | 27 %      | ~#4d3333~  | 20 %       | 25 %      |
| ~#888833~              | 45 %       | 37 %      | ~#4d4d33~  | 20 %       | 25 %      |
| ~#aa2222~              | 67 %       | 40 %      | ~#660000~  | 100 %      | 20 %      |
| ~#22aa22~              | 67 %       | 40 %      | ~#006600~  | 100 %      | 20 %      |
| ~#aaaa22~              | 67 %       | 40 %      | ~#666600~  | 100 %      | 20 %      |

#+begin_src emacs-lisp
  (use-package ediff
    :defer t
    :custom-face
    (ediff-current-diff-A ((t (:extend t :background "#4d3333"))))
    (ediff-current-diff-B ((t (:extend t :background "#334d33"))))
    (ediff-current-diff-C ((t (:extend t :background "#4d4d33"))))
    (ediff-even-diff-A
      ((t (:extend t :background "#555555" :distant-foreground "White"))))
    (ediff-even-diff-C
      ((t (:extend t :background "#555555" :distant-foreground "White"))))
    (ediff-odd-diff-B
     ((t (:extend t :background "#555555" :distant-foreground "White"))))
    (ediff-fine-diff-A ((t (:extend t :background "#660000"))))
    (ediff-fine-diff-B ((t (:extend t :background "#006600"))))
    (ediff-fine-diff-C ((t (:extend t :background "#666600")))))
#+end_src

* Editing modes
** Use /Org mode/
Configuration of Org mode includes several steps:

*** Agenda files
The list of agenda files is specific to different environments and user accounts. Each user account has to define its own list of files as a textfile and put it under ~/.emacs.d/org-agenda-files~, like the following example:
#+begin_example
~/Path to 1st directory/agenda file 1
~/Path to 1st directory/agenda file 2
~/Path to 2nd directory/agenda file 1
...
#+end_example
If the file does not exist, it is created.

*** Enable visual-line-mode
Since Org mode is for editing texts, visual line mode with word wrap is enabled:
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-files "~/.emacs.d/org-agenda-files")
    (org-babel-load-languages
     '((emacs-lisp . t)
       (org . t)
       (shell . t)))
    :config
    (let ((filename org-agenda-files))
      (if (not (file-exists-p filename))
	  (make-empty-file filename)))
    :hook (org-mode . visual-line-mode))
#+end_src

** Use /csv-mode/
Install [[https://elpa.gnu.org/packages/csv-mode.html][csv-mode]]:
#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

** Use /yaml-mode/
Install [[https://melpa.org/#/yaml-mode][yaml-mode]]:
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Use /bats-mode/
Install [[https://github.com/dougm/bats-mode][bats-mode]]:
#+begin_src emacs-lisp
  (use-package bats-mode)
#+end_src

** Use /PlantUML mode/
Install [[https://github.com/skuro/plantuml-mode][plantuml-mode]] without [[https://github.com/plantuml/plantuml-server][plantuml-server]]:
- The default execution mode is set to ~jar~, because communication to the server seems to be broken at this time. - Indentation level is set to 2.
- The output type is set to ~png~, since SVG images are transparent and black lines are not seen in a preview window with black (or dark) background:
- The Plantuml JAR is set to the local ~plantuml.jar~

*Note*: It is necessary, that a JRE is set up and that the command ~java~ can be executed! The variable ~plantuml-java-command~ is not customized to stay platform independent.
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :custom
    (plantuml-default-exec-mode 'jar)
    (plantuml-indent-level 2)
    (plantuml-jar-path "~/opt/plantuml.jar")
    :config
    (setq plantuml-output-type "png"))
#+end_src

** Use /go-mode/
Install [[https://github.com/dominikh/go-mode.el][go-mode]] further descriped in [[https://www.emacswiki.org/emacs/GoLangMode][Go Lang Mode]]:
#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

** Use /markdown-mode/
Install [[https://jblevins.org/projects/markdown-mode/][markdown-mode]]:
#+begin_src emacs-lisp
  (use-package markdown-mode)
#+end_src
